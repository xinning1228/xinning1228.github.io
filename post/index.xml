<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bug dog</title>
    <link>http://xinning1228.github.io/post/</link>
    <description>Recent content in Posts on bug dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Mar 2023 12:13:48 +0800</lastBuildDate><atom:link href="http://xinning1228.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Picgo对接Cloudflare R2的方法</title>
      <link>http://xinning1228.github.io/post/picgo%E5%AF%B9%E6%8E%A5cloudflare-r2%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 27 Mar 2023 12:13:48 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/picgo%E5%AF%B9%E6%8E%A5cloudflare-r2%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>Picgo对接Cloudflare R2的方法 1.安装Picgo及Node.js
2.启用CF-R2，不再赘述（请准备一张信用卡）
3.新建一个储存桶
4.随后在 “Manage R2 API Token” 中，Create API Token
注意，需要Edit权限
会生成一个
Access Key ID 和
Secret Access Key 请保留。
随后进入Picgo软件，安装S3插件
进入Amazon S3，进行设置
把上面生成的 Access Key ID 填入 应用密钥ID；Secret Access Key 填入 应用密钥
桶就是bucket名，直接填写即可
文件路径实际上也包含重命名规则，可按如下格式填写
payload 描述 {year} 当前日期 - 年 {month} 当前日期 - 月 {day} 当前日期 - 日 {fullName} 完整文件名（含扩展名） {fileName} 文件名（不含扩展名） {extName} 扩展名（不含.） {md5} 图片 MD5 计算值 {sha1} 图片 SHA1 计算值 {sha256} 图片 SHA256 计算值 地区填写 us-east-1 切记，必填</description>
    </item>
    
    <item>
      <title>HomeBrew : Command failed with exit 128: git 异常处理 </title>
      <link>http://xinning1228.github.io/post/homebrew-command-failed-with-exit-128-git-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/homebrew-command-failed-with-exit-128-git-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>HomeBrew : Command failed with exit 128: git 异常处理 问题 今天使用 HomeBrew 安装 Redis 时，报了个诡异的异常:
&amp;gt; fatal: not in a git directory &amp;gt; Error: Command failed with exit 128: git 复制代码 原因是 HomeBrew 的组件 homebrew-core 和 homebrew-cask 没有被识别为 Git 仓库
解决方式 打开 Terminal，输入：brew -v执行上图红线中的 git 命令，就可以了。 最后用 brew -v 看下结果，如下图所示。
另一种情况 极个别情况下，使用 --add safe.directory 也没有，那你可以将相关目录移除、然后重新添加，命令示例如下：
&amp;gt; rm -rf /opt/homebrew/Library/Taps/homebrew/homebrew-core &amp;gt; brew tap homebrew/core &amp;gt; rm -rf /opt/homebrew/Library/Taps/homebrew/homebrew-cask &amp;gt; brew tap homebrew/cask 复制代码 </description>
    </item>
    
    <item>
      <title>iterm 2 语法高亮 命令补全 </title>
      <link>http://xinning1228.github.io/post/iterm-2-%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE-%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/iterm-2-%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE-%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/</guid>
      <description>iterm 2 语法高亮 命令补全 语法高亮 安装方式：
# zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting 命令自动补全 可以根据您的历史记录和完成情况给输入的命令提供建议，效果如下：
命令自动补全
安装方式
# zsh-autosuggestiongit clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions 插件配置 安装好之后，需要修改 .zshrc：
# .zshrc...plugins=(git zsh-autosuggestions zsh-syntax-highlighting)... 修改完成后，执行命令，完成设置：
source ~/.zshrc </description>
    </item>
    
    <item>
      <title>iTerm2 &#43; Oh My Zsh 打造舒适终端体验 </title>
      <link>http://xinning1228.github.io/post/iterm2-oh-my-zsh-%E6%89%93%E9%80%A0%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/iterm2-oh-my-zsh-%E6%89%93%E9%80%A0%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C/</guid>
      <description>iTerm2 + Oh My Zsh 打造舒适终端体验 写在前面 最终效果图：
本文严重抄袭自：https://www.jianshu.com/p/7de&amp;hellip;
因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。
因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。
另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：
https://git-scm.com
介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。
下载iTerm2 可以直接去官网下载：https://www.iterm2.com/
安装完成后，在/bin目录下会多出一个zsh的文件。
Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：
chsh -s /bin/zsh 如果想修改回默认dash，同样使用chsh命令即可：
chsh -s /bin/bash OK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！
安装Oh my zsh 安装方法有两种，可以使用curl或wget，看自己环境或喜好：
# curl 安装方式 sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;#34; # wget 安装方式 sh -c &amp;#34;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;#34; 安装命令和安装完成后的截图：
oh-my-zsh开源地址：https://github.com/robbyrusse&amp;hellip;
安装PowerLine powerline官网：http://powerline.readthedocs&amp;hellip;.
安装powerline的方式依然简单，也只需要一条命令：
pip install powerline-status --user 没有安装pip的同学可能会碰到zsh: command not found: pip。
使用命令安装pip即可：
sudo easy_install pip 安装后再次执行安装powerline的命令即可。</description>
    </item>
    
    <item>
      <title>mac下镜像飞速安装Homebrew教程 </title>
      <link>http://xinning1228.github.io/post/brew-%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/brew-%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>mac下镜像飞速安装Homebrew教程 Homebrew是一款包管理工具，目前支持macOS和linux系统。主要有四个部分组成: brew、homebrew-core 、homebrew-cask、homebrew-bottles。
本文主要介绍Homebrew安装方式以及如何加速访问，顺便普及一些必要的知识。
如果你是在M1芯片的Mac上安装Homebrew，可以先阅读下这篇文章：
如果安装过程中遇到问题，请遵循下面的沟通方式：
GitHub Issue（推荐） 评论留言 私信 你可以点此 homebrew-install 创建issue，这也是最及时、最标准的反馈方式。
本教程拥有自己的主页啦，你可以获得更好的阅读体验，速度点击下面卡片查看：
1. 写在前面 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Operation timed out 使用官方脚本遇到上面的错误提示：请按照下面「安装步骤」步骤执行。
官方脚本无法使用的原因是raw.githubusercontent.com访问很不稳定，也可以采用写入hosts的方式，可以一定程度解决GitHub资源无法访问的问题，我也写了一篇操作文章，有需要可以阅读下。
2. 安装步骤 如果有更换镜像源的想法，强烈推荐使用镜像助手获取执行脚本。
/bin/bash -c &amp;#34;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&amp;#34; 如果命令执行中卡在下面信息（如提示有差异，请反馈给我）：
==&amp;gt; Tapping homebrew/core Cloning into &amp;#39;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core&amp;#39;... 请Control + C中断脚本执行如下命令：
cd &amp;#34;$(brew --repo)/Library/Taps/&amp;#34; mkdir homebrew &amp;amp;&amp;amp; cd homebrew git clone git://mirrors.ustc.edu.cn/homebrew-core.git cask 同样也有安装失败或者卡住的问题，解决方法也是一样：
cd &amp;#34;$(brew --repo)/Library/Taps/&amp;#34; cd homebrew git clone https://mirrors.ustc.edu.cn/homebrew-cask.git 成功执行之后继续执行前文的安装命令:</description>
    </item>
    
    <item>
      <title>Mac应用程序无法打开或文件损坏的处理方法 </title>
      <link>http://xinning1228.github.io/post/mac%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%88%96%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/mac%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%88%96%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</guid>
      <description>Mac应用程序无法打开或文件损坏的处理方法 很多用户在安装Mac软件的时候，经常会遇到提示“xxx.app已损坏，打不开。您应该将它移到废纸篓“或”打不开的xxx.app，因为它来自身份不明的开发者”，如下图的样子：
真的损坏了么？是不是真的要移动到废纸篓呢？遇到这样的情况，通常是打开任何来源即可轻松解决，一起看下。
打开系统偏好设置界面，进入安全性与隐私，如下图所示： 点按左下角的锁头图标，解锁更改权限 将允许从以下位置下载的应用，更改为 “ 任何来源 ” ，然后再打开应用即可 有朋友就说了，我这直接打开没有显示任何来源这一项怎么办？小编这就说下Mac没有任何来源选项怎么打开任何来源
若没有“任何来源”这个选项，按以下步骤执行：
1、打开终端（Terminal.app）2、拷贝粘贴 sudo spctl &amp;ndash;master-disable 按回车键3、输入你的账户密码，按回车键确认执行（输入密码不会显示，直接输入确定正确即可）
怎么打开终端？
1、系统偏好设置&amp;ndash;其他打开终端
需要注意的是：拷贝粘贴 sudo spctl &amp;ndash;master-disable的时候注意不要有多余的空格，输入密码的时候不会显示密码，别以为没输上呢，只要你输入对了回车就可以了。输入后到”隐私性与安全“那里看下，任何来源已经选中并已打开，这个时候不需要再解锁选中等其他操作。
如已经开启任何来源，但依旧打不开（macOS Catalina 10.15以上会遇到）按以下步骤执行：
绕开公证：
复制指令【sudo xattr -r -d com.apple.quarantine 】后面有个空格不要丢了，将损坏的文件拖动到指令后面，回车，输入电脑密码回车即可
上述修复指令输入完成，打开软件还是提示损坏，再进行下面的步骤：
修复签名：
复制指令【sudo codesign &amp;ndash;sign - &amp;ndash;force &amp;ndash;deep 】后面有个空格不要丢了，将损坏的文件拖动到指令后面，回车，输入电脑密码回车即可
再次 右键打开 软件应该可以解决这个问题了。
还有一种情况，如安装应用时，出现 “ 打不开 XXX.app，因为它来自身份不明的开发者 ” ，并提示你的软件在什么位置什么时间下载了磁盘影像。如图所示：
遇到这种情况，方法如下：1、将软件放入“应用程序”后，点击软件 右键-打开 ，如图所示：
打开应用程序文件夹，找到 Final Cut Pro，然后按住 control 键，点击 Final Cut Pro，然后在弹出的菜单上面，点击打开。（通俗的讲就是在fcpx上右键打开）
接下来出现了一个对话框，上面有“打开”按钮，点击“打开”按钮，如下图箭头所示，见证奇迹吧！
这样就轻松解决了安装fcpx后在打开任意来源的情况下还是打不开软件的问题。另外相信您也会和小编一样懂得举一反三，这种方法大多数情况下也适用于其他Mac软件，在遇到打不开的情况下不要放弃，试一试这种方法。</description>
    </item>
    
    <item>
      <title>MDM机器绕过监管 </title>
      <link>http://xinning1228.github.io/post/mdm%E6%9C%BA%E5%99%A8%E7%BB%95%E8%BF%87%E7%9B%91%E7%AE%A1/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/mdm%E6%9C%BA%E5%99%A8%E7%BB%95%E8%BF%87%E7%9B%91%E7%AE%A1/</guid>
      <description>MDM机器绕过监管 6.1重新安装系统 电脑关机状态下，键盘长按command+R键不放，同时按一下开机键松手，此时继续长按command+R键不放，直到出现苹果图标。 选择“磁盘工具”，然后“继续” 选择系统磁盘，点击抹掉。这里可以看到磁盘使用情况，以及剩余情况。 弹出提示要抹掉“mac os”吗？这里一定要注意磁盘格式一定要选择APFS格式. 抹点进程完成，点击完成 回到macOS实用工具界面，选择重新安装 macOS，点击继续。 初始安装将运行大约 1 小时，并重新启动一次 然后它将显示大约 10-15 分钟的剩余时间 当它再次重新启动时，请务必按command-R启动进入恢复并继续执行主要程序 6.2主要程序 打开终端输入以下代码 $ csrutil disable $ reboot 再次进入恢复模式 进入磁盘工具,安装HD盘 退出磁盘工具,打开终端输入以下代码 $ cd &amp;#34;/Volumes/Macintosh HD/System/Library&amp;#34; $ cd ../../etc $ echo &amp;#34;0.0.0.0 iprofiles.apple.com&amp;#34; &amp;gt;&amp;gt; hosts $ echo &amp;#34;0.0.0.0 mdmenrollment.apple.com&amp;#34; &amp;gt;&amp;gt; hosts $ echo &amp;#34;0.0.0.0 deviceenrollment.apple.com&amp;#34; &amp;gt;&amp;gt; hosts $ echo &amp;#34;0.0.0.0 gdmf.apple.com&amp;#34; &amp;gt;&amp;gt; hosts $ csrutil enable $ reboot 如果您来到“选择您的国家/地区”对话框，请确保不要选择无线网络，而是“在没有互联网连接的情况下继续” 正常启动后，您可以在终端中验证 DEP 状态： $ profiles status -type enrollment Enrolled via DEP: No MDM enrollment: No </description>
    </item>
    
    <item>
      <title>OpenAI </title>
      <link>http://xinning1228.github.io/post/openai-/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/openai-/</guid>
      <description>OpenAI 5.1前期准备 质量过关的T子（免费的或许可行，但后面问题会很多），软路由不行，必须是软件 下载并安装谷歌浏览器 T子开全局模式 清除浏览器缓存 打开链接查IP， 中国 香港 台湾 俄罗斯节点禁用
谷歌浏览器打开无痕模式 5.2登录&amp;amp;使用教程 openAI官网：https://openai.com/api/
chatGPT（AI对话):https://chat.openai.com/auth/login
DALL·E 2（AI画画）:https://openai.com/dall-e-2/
GTP-3（AI论文）:https://beta.openai.com/playground</description>
    </item>
    
    <item>
      <title>Powerlevel10k </title>
      <link>http://xinning1228.github.io/post/powerlevel10k/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/powerlevel10k/</guid>
      <description>Powerlevel10k Powerlevel10k 安装 手动安装 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Powerlevel10k 配置 编辑 .zshrc 文件， 文件路径 ~/.zshrc open ~/.zshrc ZSH_THEME=&amp;#34;powerlevel10k/powerlevel10k&amp;#34; 更新.zshrc文件。 source ~/.zshrc Powerlevel10k 走流程 p10k configure </description>
    </item>
    
    <item>
      <title>telegram </title>
      <link>http://xinning1228.github.io/post/telegram/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/telegram/</guid>
      <description>telegram 3.1. 解除对+86大陆用户手机号绑定账户的私聊 向官方@SpamBot发送消息申请（跟着提示操作就可以）
点击选项：But I can&amp;rsquo;t message non-contacts！
点击选项：No I&amp;rsquo;ll never do any of this！
第三步输入内容：accident，发送
大约30分钟左右即可解除限制，有可能更长
30分钟左右还未解除的就继续等等或再次提交
B0t不会回复你结果，自己找人私聊测试
3.2设置中文 Telegram简体中文语言包直接点击链接汉化Telegram电报：
https://t.me/setlanguage/zhcncc</description>
    </item>
    
    <item>
      <title>telegram </title>
      <link>http://xinning1228.github.io/post/%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8D%B8%E8%BD%BDoh-my-zsh/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8D%B8%E8%BD%BDoh-my-zsh/</guid>
      <description>安装及卸载Oh My Zsh xcode-select --install Oh My Zsh, 『 安装 &amp;amp; 配置 』 Oh My Zsh 是什么 Oh My Zsh 是一款社区驱动的命令行工具，正如它的主页上说的，Oh My Zsh是一种生活方式。它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。 Oh My Zsh 是基于 zsh 命令行的一个扩展工具集，提供了丰富的扩展功能。 安装 Oh My Zsh 前提条件：必须已安装 zsh 笔者是 Mac 系统，以下操作都是基于 Mac 系统。 Oh My Zsh - a delightful &amp;amp; open source framework for Z-Shellohmyz.sh/
robbyrussell/oh-my-zshgithub.com/robbyrussell/oh-my-zsh
Zsh 是什么 Zsh 是一款强大的虚拟终端，既是一个系统的虚拟终端，也可以作为一个脚本语言的交互解析器。 # 打开终端，在终端上输入: zsh --version # 这个命令来查看我们的电脑上是否安装了 Zsh # 端查询版本为： zsh 5.8 (x86_64-apple-darwin20.</description>
    </item>
    
    <item>
      <title>telegram </title>
      <link>http://xinning1228.github.io/post/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</guid>
      <description>Home brew &amp;amp;oh-my-zsh&amp;amp;语法高亮&amp;amp;自动补全&amp;amp;powerlevel10k 安装Home brew /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; 更新zsh brew install zsh 安装oh-my-zsh oh-my-zsh
curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 安装oh-my-zsh插件 语法高亮插件 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 语法自动建议插件 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 配置两个插件vi .zshrc plugins=( zsh-syntax-highlighting zsh-autosuggestions ) 更新.zshrc source ~/.zshrc powerlevel10k 安装
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k 配置
ZSH_THEME=&amp;#34;powerlevel10k/powerlevel10k&amp;#34; 重新配置
p10k configure 参考自https://www.cnblogs.com/himonkey/p/11853487.html#</description>
    </item>
    
    <item>
      <title>如何在Mac上安装Node.js和NPM </title>
      <link>http://xinning1228.github.io/post/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E5%AE%89%E8%A3%85node.js%E5%92%8Cnpm/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E5%AE%89%E8%A3%85node.js%E5%92%8Cnpm/</guid>
      <description>如何在Mac上安装Node.js和NPM 首页 » 网页服务器 » 如何在Mac上安装Node.js和NPM
介绍
Node.js是一个流行的后端JavaScript运行时，用于创建Web服务器和可扩展的网络应用程序。该环境支持服务器端脚本-在提供给用户之前为网页生成动态内容。
NPM是JavaScript的软件包管理器和Node.js的默认软件包管理器。因此，NPM作为推荐功能与Node.js一起安装。
本教程将向您展示如何使用Homebrew软件包管理器在Mac上安装Node.js和NPM。
先决条件
访问终端 行政级别特权 **注意：**Node.js在其网站上有一个适用于macOS的PKG安装程序。然而，使用Homebrew安装是推荐的方法。
安装自制 1.要在macOS上安装Homebrew，请浏览Homebrew的官方网站并复制页面上显示的链接。
**注意：**不要从屏幕截图中复制命令，因为它将来可能会发生变化。始终访问网站以获取最新命令。
2.打开终端并粘贴命令。出现提示时键入sudo密码。最后，按Return键确认要安装Homebrew。
在Mac上安装Node.js和NPM **注意：**有关其他操作系统，请参阅我们在Windows、Ubuntu、CentOS和Debian上安装Node.js和NPM的教程。
1.键入以下命令来安装Node.js和NPM：
brew install node Homebrew下载并安装依赖项。
2.安装完成后，通过检查其版本来确认您成功安装了Node.js：
node -v 系统将Node.js版本显示为命令的输出。
3.接下来，通过键入来检查NPM的安装版本：
npm -v 显示NPM版本号。
在Mac上更新Node.js和NPM 1.在继续升级Node.js安装之前，请通过键入以下内容来更新Homebrew的存储库：
brew update 2.更新完成后，键入以下命令：
brew upgrade node 示例中的输出显示，系统上已经安装了最新版本的Node.js。
**注意：**有关更多详细信息，请查看我们的文章如何更新Node.js和NPM。
在Mac上卸载Node.js和NPM 1.使用**brew uninstall**命令卸载Node.js和NPM：
brew uninstall node 2.使用以下方式删除所有未使用的依赖项：
brew autoremove 此命令删除**brew uninstall**未删除的软件包。
结论
阅读本教程后，您应该知道如何使用Homebrew在macOS上安装Node.js和NPM。如果您想了解有关具有Node.js的MEAN堆栈的更多信息，请阅读LAMP与MEAN：哪个更好？
Marko Aleksic
Marko Aleksić是phoenixNAP的技术作家。他对IT所有事物的与生俱来的好奇心，加上十多年的写作、教学和在IT相关领域的工作背景，使他进入技术写作，在那里他有机会运用自己的技能，使技术对每个人来说不那么令人生畏。
接下来你应该阅读
数据库
MongoDB与MySQL
2020年12月31日
从交易模型差异到支持质量，数据库管理系统有各种形状和大小。在本比较文章中，您将阅读两种流行的DBMS解决方案之间的区别：MongoDB和MySQL。
阅读更多
© 2022 版权所有 phoenixNAP | 全球 IT 服务。版权所有。</description>
    </item>
    
    <item>
      <title>使用github&#43;picGo&#43;Typora解决网页图片插入问题</title>
      <link>http://xinning1228.github.io/post/%E4%BD%BF%E7%94%A8github&#43;picgo&#43;typora%E8%A7%A3%E5%86%B3%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 11 Dec 2022 17:38:34 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E4%BD%BF%E7%94%A8github&#43;picgo&#43;typora%E8%A7%A3%E5%86%B3%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E9%97%AE%E9%A2%98/</guid>
      <description>利用图床可以完美解决markdown文件图片插入的问题,使用github的免费空间储存图片,结合picGo自动上传功能,可以算的上一个完美的图床方案
一.github配置 1.1 创建一个新仓库用于图片储存 点击新建一个仓库
给仓库填写名称
勾选以下两个选项选项
点击绿色按钮创建
1.2 获取Token用于pic访问github 打开github设置
找到设置中Developer settings选项
点击personal access tokens
点击token (classic)
点击Generate new token 点击Generate new token (classic)
填写名称
选择时间
勾选ropo选项
最后点击绿色按钮Generate token 新建
复制生成的token值
token值只显示一次,注意保存.
二. picGo配置 2.1 下载picGo并安装 picGo下载地址
2.2 配置picGo 打开picGo软件 点击图床设置 点击｀github 仓库名：[github用户名]/[第一步新建的仓库名称] 分支：默认master，从2020.10.01开始，github的默认分支名变更为main 设定token：第一步创建的token 指定存储路径：可填可不填，如果填写了，图片就会存储在img文件夹下 设定自定义域名：https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名]@main，注意，此处的分支一定要填写@main 三. Typora配置 3.1 下载Typora并安装 下载地址
3.2 配置Typora中上传功能 上传服务设定为PicGo(app)
设定路径
点击验证图片上传选项,测试上传功能
3.3 配置PicGo-Server 将监听地址设为:127.0.0.1
监听端口设为36677
配置完成之后,每次在Typora中插入图片,可转为图床中的地址,从而解决markdown文件,图像插入的问题</description>
    </item>
    
    <item>
      <title>Typora实用技巧</title>
      <link>http://xinning1228.github.io/post/typora-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 09 Dec 2022 14:29:38 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/typora-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>一、块元素 1.1 标题 标题在行的开头使用1-6个＃字符，对应于标题级别1-6，当然也可使用ctrl+数字键进行分级。
# 这是一级标题## 这是二级标题###### 这是六级标题 1.2 引用文字 Markdown 使用电子邮件样式&amp;gt;字符进行块引用。它们表示为
&amp;gt;可以进行嵌套,例如:
今天是很美好的
明天会更加美好
后天是周末
&amp;gt; 这是一个有两段的块引用。这是第一段。&amp;gt; 这是第二段。Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&amp;gt; 这是另一个只有一个段落的块引用。有三个空行分隔两个块引用。 1.3 列表 输入 * list item 1 将创建一个无序列表，该 * 符号可以替换为 + 或 -.例如
这是无序列表 这是无序列表 这是无序列表 输入 1. list item 1 将创建一个有序列表.例如:
这是有序列表 这是有序列表 这是有序列表 其 markdown 源代码如下：
按teb可以进行缩进
## 无序列表 * 红色 * 绿色 * 蓝色 ## 有序列表 1.</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（五)</title>
      <link>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%94/</link>
      <pubDate>Fri, 22 Apr 2022 14:29:38 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%94/</guid>
      <description>上一期我们总结了几个喜欢的HEXO主题，但是有些同学看完前几期教程可能连本地也没搭建出来，本期我们来聊一聊建站常见的几种报错，下面也有相应的解决办法。
warning: LF will be replaced by CRLF in js/utils.js. git config --global core.autocrlf false 无法加载文件 C:\Users\10186\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本 按下 win+s 输入 powershell。然后右键以管理员身份运行。 然后输入 set-ExecutionPolicy RemoteSigned 命令 升级主题方法 git pull 升级 Hexo npm install Warning: Accessing non-existent property xxxx of module exports inside circular dependency 采用低版本 nodejs Cannot GET/xxx 1. 判断 public 目录下 xxx 文件是否存在。 （我的错误是 Cannot GET /，因此在 public 目录下寻找 index.html 是否存在。） 2. 如果说 index.html 不存在，那么执行 hexo c，hexo g 重新生成一次，回到步骤 1。 3.</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（四）</title>
      <link>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%9B/</link>
      <pubDate>Wed, 20 Apr 2022 12:31:51 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%9B/</guid>
      <description>上期教程相信你已经学会了如何更改hexo的主题，本期给大家推荐几个我觉得很好看的主题，预览地址与项目地址的链接也将放在下方，请大家自行取用。
NEXT 具体介绍：http://theme-next.iissnan.com/ 项目地址：https://github.com/iissnan/hexo-theme-next/
stellar 使用介绍：https://xaoxuu.com/wiki/stellar/ 项目地址：https://github.com/xaoxuu/hexo-theme-stellar
pure 预览地址：https://blog.cofess.com/ 项目地址：https://github.com/cofess/hexo-theme-pure
####　nexmoe 预览地址：https://nexmoe.com/ 项目地址：https://github.com/theme-nexmoe/hexo-theme-nexmoe
melody 预览地址：https://molunerfinn.com/ 主题文档：https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/
aurora 预览地址：https://tridiamond.tech/ 项目地址：https://github.com/auroral-ui/hexo-theme-aurora
butterfly 预览地址：https://butterfly.js.org/ 项目地址：https://github.com/jerryc127/hexo-theme-butterfly
yun 示例：https://www.yunyoujun.cn/ 使用文档：https://yun.yunyoujun.cn/ 项目地址： https://github.com/YunYouJun/hexo-theme-yun
diaspora 预览地址：https://fech.in/ 项目地址：https://github.com/Fechin/hexo-theme-diaspora
ayer 预览地址：https://shen-yu.gitee.io/ 项目地址：https://github.com/Shen-Yu/hexo-theme-ayer 国内镜像：https://gitee.com/shen-yu/hexo-theme-ayer
Bamboo 示例：https://yuang01.github.io/ 项目地址：https://github.com/yuang01/hexo-theme-bamboo
以上是我觉得比较好看的几个主题，下期给大家盘点一下在构建网站时，常见的几个报错及解决方法，下期再见。 </description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（三）</title>
      <link>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%89/</link>
      <pubDate>Tue, 19 Apr 2022 14:40:43 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%89/</guid>
      <description>上一期教程你已经学会了如何购买喜欢的域名，以及如何将域名解析到你的网站上，本期教给你如何去润色你的网站，打造属于你的风格。
1、下载主题 2、更改主题 3、主题的一些相关设置 4、本地预览及上传 1、下载主题 下载主题有两种办法，你可以直接输入主题网站 例如：https://github.com/theme-nexmoe/hexo-theme-nexmoe 下载压缩包 解压到博客文件夹theme即可，或者输入在根目录git输入以下代码：
git clone https://github.com/theme-nexmoe/hexo-theme-nexmoe.git 这样hexo的主题就下载到本地了
2、更改主题 打开根目录中_config文件，将theme后面的名称替换为：themes中的文件夹名称并保存。
3、主题的一些相关设置 我们约定：根目录中的_config文件为配置文件，theme中的_config文件为主题文件。打开主题文件，在那里我们可以更改主题中的相关设置，例如分类、归档等，在配置文件中我们可以更改一些基础配置，例如选用什么主题或者网站名称等。
4、本地预览及上传 输入以下代码清理网站缓存：
hexo c 输入以下代码下载：
hexo g 输入以下代码本地预览：
hexo s 输入以下代码上传至服务器：
hexo d 稍等片刻刷新我们的网站就可以看到主题已经更改了，下期我将盘点一些颜值较高的一些主题分享给大家，下期再见。 </description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（二）</title>
      <link>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C/</link>
      <pubDate>Thu, 14 Apr 2022 19:44:29 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C/</guid>
      <description>通过第一期教程，相信你已经成功搭建了自己的网站，并将它挂载到github服务器上了，本期将教给你如何把一个喜欢的域名解析到网页上。
1、什么是域名 2、域名网站 3、在GitHub上创建存储库 4、在万网进行域名解析 5、将域名保存至本地 1、什么是域名 由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映 射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。
2、如何购买域名 国内的域名网站有万网、腾讯云等网站可以购买。国外比较知名的域名网站有Godaddy、name等，搜索自己喜欢的域名进行下单，需要注意的，有以下几点： 1、国内网站购买域名都需要实名，但不需要备案。 2、.cn为后缀的域名都需要实名，因为这是中国的国家域名。 3、在国外注册的域名除.cn后缀的域名，其他例如.com、.top等域名都不需要实名。 4、无论.cn、.com，无论国内网站或者国外网站，都不需要备案，是否备案以服务器区域为主，如果挂载到国内服务器，网站必须要备案。
这里推荐在国外域名网站购买域名，不需要实名、不会突然受到管控，建议购买.com、.net等国际知名域名。 3、在GitHub上创建存储库 1、在github上点击之前你创建的库，点击settings，在pages那一栏中找到 Custom domain 这一选项，将你购买的域名填入此处，点击save。
4、在万网进行域名解析 到域名管理商将域名解析到（你的名字）.github.io ,等待域名生效，需要注意的是如果创建A的解析，则需要在cmd ping一下你的（你的名字）.github.io 填入ping出的ip地址才会生效。
5、将域名保存至本地 在你博客文件夹中，打开\source文件夹，创建一个无任何格式的文件，将你购买的域名填入此处，注意：如果没有这一步，你的域名每次部署都要重置。
现在你可以通过你的域名直接访问你的博客了，下一期将教你如何更改你的博客主题，进一步优化你的网站。 </description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（一）</title>
      <link>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/</link>
      <pubDate>Tue, 12 Apr 2022 12:02:04 +0000</pubDate>
      
      <guid>http://xinning1228.github.io/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/</guid>
      <description>考虑过很多构建知识网络的方法，先后使用过notion、onenote、用过telegram记过笔记，后来想想自己搭个网站吧，搞个自己的知识库，具体步骤如下：
1、注册github账号 2、安装git软件 3、安装nodejs软件 4、安装HEXO 5、初始化HEXO 6、将blog部署到github服务器 1、注册github账号 github官网：https://github.com/ 进入官网之后点击 sign up按钮 根据步骤进行注册需要注意的是，github不支持QQ邮箱。
2、安装git软件 Git安装方法很多，最简单的是直接官网下载软件包，然后安装（Mac和Windows及其他版本都有） 下载链接：https://git-scm.com/downloads
3、安装nodejs软件 Node.js也可以直接去官网下载对应系统安装包，然后一步步安装即可。 下载链接：https://nodejs.org/zh-cn/download/
这一步windows需要配置环境，具体方法网上很多，需要注意的是，路径一定要选正确
4、安装hexo 新建项目目录，可以在任意位置，尽量全英文路径。以我为例，我会在E盘创建一个blog的文件夹，用于存放我的项目文件
如果你下载好了git并配置好了nodejs，进入blog文件夹，右击会出现一个git bash here的标志，点击它，输入：
$ npm install -g hexo-cli 这样你的hexo就安装好了
5、初始化hexo 右击git bash here 输入：
$ hexo init 这一步你的blog文件夹里会生成很多文件，hexo已经在你电脑上了。
6、将blog部署到github服务器 登录github账号，创建一个新项目，项目名称：（你的账户名）.github.io 我们回到我们的blog文件夹，修改配置文件_config.yml，在最下方改成
deploy: type: git repository: https://github.com/（你的名字）/（你的名字）.github.io.git branch: master 现在可以输入以下指令
$ hexo g $ hexo s $ hexo d 如果没出错的话，现在你的blog已经部署到github服务器上去了 输入：（你的名字）.github.io 就可以进行访问了 </description>
    </item>
    
  </channel>
</rss>
